
#### All compounds with default organism_name:

python Tree.py --log_file tree.log --itermax 1000 --expansion_width 10 --time_budget 7200 --max_depth 7 --UCT_policy Biochemical_UCT_1 --UCTK 2 --bias_k 1 --k_rave 50 --Rollout_policy Rollout_policy_random_uniform_on_biochemical_multiplication_score --max_rollout 3 --chemical_scoring SubandprodChemicalScorer --virtual_visits 0 --progressive_bias_strategy 0 --diameter 8 --c_name Avenacin --c_smiles "C[C@]12CC[C@@H]([C@@]([C@@H]1CC[C@@]3([C@@H]2C[C@@H]4[C@]5([C@]3(C[C@@H]([C@@]6([C@H]5C[C@@]([C@H](C6)OC(=O)C7=CC=CC=C7NC)(C)C=O)C)O)C)O4)C)(C)CO)O[C@H]8[C@@H]([C@H]([C@H](CO8)O[C@H]9[C@@H]([C@H]([C@@H]([C@H](O9)CO)O)O)O)O)O[C@H]1[C@@H]([C@H]([C@@H]([C@H](O1)CO)O)O)O" --folder_to_save Avenacin --biological_score_cut_off 0.1 --substrate_only_score_cut_off 0.01 --chemical_score_cut_off 0.3 --minimal_visit_counts 1 &

python Tree.py --log_file tree.log --itermax 1000 --expansion_width 10 --time_budget 7200 --max_depth 7 --UCT_policy Biochemical_UCT_1 --UCTK 2 --bias_k 1 --k_rave 50 --Rollout_policy Rollout_policy_random_uniform_on_biochemical_multiplication_score --max_rollout 3 --chemical_scoring SubandprodChemicalScorer --virtual_visits 0 --progressive_bias_strategy 0 --diameter 8 --c_name MomilactoneB --c_smiles "C[C@]1(CC[C@@H]2C(=CC3[C@@H]4[C@]25CCC([C@@]4(C(=O)O3)C)(OC5)O)C1)C=C" --folder_to_save MomilactoneB --biological_score_cut_off 0.1 --substrate_only_score_cut_off 0.01 --chemical_score_cut_off 0.3 --minimal_visit_counts 1 &

python Tree.py --log_file tree.log --itermax 1000 --expansion_width 10 --time_budget 7200 --max_depth 7 --UCT_policy Biochemical_UCT_1 --UCTK 2 --bias_k 1 --k_rave 50 --Rollout_policy Rollout_policy_random_uniform_on_biochemical_multiplication_score --max_rollout 3 --chemical_scoring SubandprodChemicalScorer --virtual_visits 0 --progressive_bias_strategy 0 --diameter 8 --c_name Afrormosin --c_smiles "COC1=CC=C(C=C1)C2=COC3=CC(=C(C=C3C2=O)OC)O" --folder_to_save Afrormosin --biological_score_cut_off 0.1 --substrate_only_score_cut_off 0.01 --chemical_score_cut_off 0.3 --minimal_visit_counts 1 &

python Tree.py --log_file tree.log --itermax 1000 --expansion_width 10 --time_budget 7200 --max_depth 7 --UCT_policy Biochemical_UCT_1 --UCTK 2 --bias_k 1 --k_rave 50 --Rollout_policy Rollout_policy_random_uniform_on_biochemical_multiplication_score --max_rollout 3 --chemical_scoring SubandprodChemicalScorer --virtual_visits 0 --progressive_bias_strategy 0 --diameter 8 --c_name Lycosantalonol --c_smiles "CC(=CCCC(C)(C(=O)CCC1(C2CC3C1(C3C2)C)C)O)C" --folder_to_save Lycosantalonol --biological_score_cut_off 0.1 --substrate_only_score_cut_off 0.01 --chemical_score_cut_off 0.3 --minimal_visit_counts 1 &

python Tree.py --log_file tree.log --itermax 1000 --expansion_width 10 --time_budget 7200 --max_depth 7 --UCT_policy Biochemical_UCT_1 --UCTK 2 --bias_k 1 --k_rave 50 --Rollout_policy Rollout_policy_random_uniform_on_biochemical_multiplication_score --max_rollout 3 --chemical_scoring SubandprodChemicalScorer --virtual_visits 0 --progressive_bias_strategy 0 --diameter 8 --c_name Vincamine --c_smiles "CC[C@@]12CCCN3[C@@H]1C4=C(CC3)C5=CC=CC=C5N4[C@](C2)(C(=O)OC)O" --folder_to_save Vincamine --biological_score_cut_off 0.1 --substrate_only_score_cut_off 0.01 --chemical_score_cut_off 0.3 --minimal_visit_counts 1 &

python Tree.py --log_file tree.log --itermax 1000 --expansion_width 10 --time_budget 7200 --max_depth 7 --UCT_policy Biochemical_UCT_1 --UCTK 2 --bias_k 1 --k_rave 50 --Rollout_policy Rollout_policy_random_uniform_on_biochemical_multiplication_score --max_rollout 3 --chemical_scoring SubandprodChemicalScorer --virtual_visits 0 --progressive_bias_strategy 0 --diameter 8 --c_name Brucine --c_smiles "COC1=C(C=C2C(=C1)[C@]34CCN5[C@H]3C[C@@H]6[C@@H]7[C@@H]4N2C(=O)C[C@@H]7OCC=C6C5)OC" --folder_to_save Brucine --biological_score_cut_off 0.1 --substrate_only_score_cut_off 0.01 --chemical_score_cut_off 0.3 --minimal_visit_counts 1 &

python Tree.py --log_file tree.log --itermax 1000 --expansion_width 10 --time_budget 7200 --max_depth 7 --UCT_policy Biochemical_UCT_1 --UCTK 2 --bias_k 1 --k_rave 50 --Rollout_policy Rollout_policy_random_uniform_on_biochemical_multiplication_score --max_rollout 3 --chemical_scoring SubandprodChemicalScorer --virtual_visits 0 --progressive_bias_strategy 0 --diameter 8 --c_name Diaboline --c_smiles "CC(=O)N1[C@H]2[C@H]3[C@H]4C[C@H]5[C@@]2(CCN5CC4=CCO[C@H]3O)C6=CC=CC=C61" --folder_to_save Diaboline --biological_score_cut_off 0.1 --substrate_only_score_cut_off 0.01 --chemical_score_cut_off 0.3 --minimal_visit_counts 1 &

python Tree.py --log_file tree.log --itermax 1000 --expansion_width 10 --time_budget 7200 --max_depth 7 --UCT_policy Biochemical_UCT_1 --UCTK 2 --bias_k 1 --k_rave 50 --Rollout_policy Rollout_policy_random_uniform_on_biochemical_multiplication_score --max_rollout 3 --chemical_scoring SubandprodChemicalScorer --virtual_visits 0 --progressive_bias_strategy 0 --diameter 8 --c_name Falcarindiol --c_smiles "CCCCCCC/C=C\[C@@H](C#CC#C[C@@H](C=C)O)O" --folder_to_save Falcarindiol --biological_score_cut_off 0.1 --substrate_only_score_cut_off 0.01 --chemical_score_cut_off 0.3 --minimal_visit_counts 1 &

#### All compounds with none organism_name and with a complementary_sink:

python Tree.py --log_file tree.log --itermax 1000 --expansion_width 10 --time_budget 7200 --max_depth 7 --UCT_policy Biochemical_UCT_1 --UCTK 2 --bias_k 1 --k_rave 50 --Rollout_policy Rollout_policy_random_uniform_on_biochemical_multiplication_score --max_rollout 3 --chemical_scoring SubandprodChemicalScorer --virtual_visits 0 --progressive_bias_strategy 0 --diameter 8 --c_name Avenacin --c_smiles "C[C@]12CC[C@@H]([C@@]([C@@H]1CC[C@@]3([C@@H]2C[C@@H]4[C@]5([C@]3(C[C@@H]([C@@]6([C@H]5C[C@@]([C@H](C6)OC(=O)C7=CC=CC=C7NC)(C)C=O)C)O)C)O4)C)(C)CO)O[C@H]8[C@@H]([C@H]([C@H](CO8)O[C@H]9[C@@H]([C@H]([C@@H]([C@H](O9)CO)O)O)O)O)O[C@H]1[C@@H]([C@H]([C@@H]([C@H](O1)CO)O)O)O" --folder_to_save Avenacin_Test_1 --biological_score_cut_off 0.1 --substrate_only_score_cut_off 0.01 --chemical_score_cut_off 0.3 --minimal_visit_counts 1 --organism_name 'none' --complementary_sink "building_blocks.csv" &

python Tree.py --log_file tree.log --itermax 1000 --expansion_width 10 --time_budget 7200 --max_depth 7 --UCT_policy Biochemical_UCT_1 --UCTK 2 --bias_k 1 --k_rave 50 --Rollout_policy Rollout_policy_random_uniform_on_biochemical_multiplication_score --max_rollout 3 --chemical_scoring SubandprodChemicalScorer --virtual_visits 0 --progressive_bias_strategy 0 --diameter 8 --c_name MomilactoneB --c_smiles "C[C@]1(CC[C@@H]2C(=CC3[C@@H]4[C@]25CCC([C@@]4(C(=O)O3)C)(OC5)O)C1)C=C" --folder_to_save MomilactoneB_Test_1 --biological_score_cut_off 0.1 --substrate_only_score_cut_off 0.01 --chemical_score_cut_off 0.3 --minimal_visit_counts 1 --organism_name 'none' --complementary_sink "building_blocks.csv" &

python Tree.py --log_file tree.log --itermax 1000 --expansion_width 10 --time_budget 7200 --max_depth 7 --UCT_policy Biochemical_UCT_1 --UCTK 2 --bias_k 1 --k_rave 50 --Rollout_policy Rollout_policy_random_uniform_on_biochemical_multiplication_score --max_rollout 3 --chemical_scoring SubandprodChemicalScorer --virtual_visits 0 --progressive_bias_strategy 0 --diameter 8 --c_name Afrormosin --c_smiles "COC1=CC=C(C=C1)C2=COC3=CC(=C(C=C3C2=O)OC)O" --folder_to_save Afrormosin_Test_1 --biological_score_cut_off 0.1 --substrate_only_score_cut_off 0.01 --chemical_score_cut_off 0.3 --minimal_visit_counts 1 --organism_name 'none' --complementary_sink "building_blocks.csv" &

python Tree.py --log_file tree.log --itermax 1000 --expansion_width 10 --time_budget 7200 --max_depth 7 --UCT_policy Biochemical_UCT_1 --UCTK 2 --bias_k 1 --k_rave 50 --Rollout_policy Rollout_policy_random_uniform_on_biochemical_multiplication_score --max_rollout 3 --chemical_scoring SubandprodChemicalScorer --virtual_visits 0 --progressive_bias_strategy 0 --diameter 8 --c_name Lycosantalonol --c_smiles "CC(=CCCC(C)(C(=O)CCC1(C2CC3C1(C3C2)C)C)O)C" --folder_to_save Lycosantalonol_Test_1 --biological_score_cut_off 0.1 --substrate_only_score_cut_off 0.01 --chemical_score_cut_off 0.3 --minimal_visit_counts 1 --organism_name 'none' --complementary_sink "building_blocks.csv" &

python Tree.py --log_file tree.log --itermax 1000 --expansion_width 10 --time_budget 7200 --max_depth 7 --UCT_policy Biochemical_UCT_1 --UCTK 2 --bias_k 1 --k_rave 50 --Rollout_policy Rollout_policy_random_uniform_on_biochemical_multiplication_score --max_rollout 3 --chemical_scoring SubandprodChemicalScorer --virtual_visits 0 --progressive_bias_strategy 0 --diameter 8 --c_name Vincamine --c_smiles "CC[C@@]12CCCN3[C@@H]1C4=C(CC3)C5=CC=CC=C5N4[C@](C2)(C(=O)OC)O" --folder_to_save Vincamine_Test_1 --biological_score_cut_off 0.1 --substrate_only_score_cut_off 0.01 --chemical_score_cut_off 0.3 --minimal_visit_counts 1 --organism_name 'none' --complementary_sink "building_blocks.csv" &

python Tree.py --log_file tree.log --itermax 1000 --expansion_width 10 --time_budget 7200 --max_depth 7 --UCT_policy Biochemical_UCT_1 --UCTK 2 --bias_k 1 --k_rave 50 --Rollout_policy Rollout_policy_random_uniform_on_biochemical_multiplication_score --max_rollout 3 --chemical_scoring SubandprodChemicalScorer --virtual_visits 0 --progressive_bias_strategy 0 --diameter 8 --c_name Brucine --c_smiles "COC1=C(C=C2C(=C1)[C@]34CCN5[C@H]3C[C@@H]6[C@@H]7[C@@H]4N2C(=O)C[C@@H]7OCC=C6C5)OC" --folder_to_save Brucine_Test_1 --biological_score_cut_off 0.1 --substrate_only_score_cut_off 0.01 --chemical_score_cut_off 0.3 --minimal_visit_counts 1 --organism_name 'none' --complementary_sink "building_blocks.csv" &

python Tree.py --log_file tree.log --itermax 1000 --expansion_width 10 --time_budget 7200 --max_depth 7 --UCT_policy Biochemical_UCT_1 --UCTK 2 --bias_k 1 --k_rave 50 --Rollout_policy Rollout_policy_random_uniform_on_biochemical_multiplication_score --max_rollout 3 --chemical_scoring SubandprodChemicalScorer --virtual_visits 0 --progressive_bias_strategy 0 --diameter 8 --c_name Diaboline --c_smiles "CC(=O)N1[C@H]2[C@H]3[C@H]4C[C@H]5[C@@]2(CCN5CC4=CCO[C@H]3O)C6=CC=CC=C61" --folder_to_save Diaboline_Test_1 --biological_score_cut_off 0.1 --substrate_only_score_cut_off 0.01 --chemical_score_cut_off 0.3 --minimal_visit_counts 1 --organism_name 'none' --complementary_sink "building_blocks.csv" &

python Tree.py --log_file tree.log --itermax 1000 --expansion_width 10 --time_budget 7200 --max_depth 7 --UCT_policy Biochemical_UCT_1 --UCTK 2 --bias_k 1 --k_rave 50 --Rollout_policy Rollout_policy_random_uniform_on_biochemical_multiplication_score --max_rollout 3 --chemical_scoring SubandprodChemicalScorer --virtual_visits 0 --progressive_bias_strategy 0 --diameter 8 --c_name Falcarindiol --c_smiles "CCCCCCC/C=C\[C@@H](C#CC#C[C@@H](C=C)O)O" --folder_to_save Falcarindiol_Test_1 --biological_score_cut_off 0.1 --substrate_only_score_cut_off 0.01 --chemical_score_cut_off 0.3 --minimal_visit_counts 1 --organism_name 'none' --complementary_sink "building_blocks.csv" &

#Morphine Test

python Tree.py --log_file tree.log --itermax 1000 --expansion_width 10 --time_budget 7200 --max_depth 7 --UCT_policy Biochemical_UCT_1 --UCTK 2 --bias_k 1 --k_rave 50 --Rollout_policy Rollout_policy_random_uniform_on_biochemical_multiplication_score --max_rollout 3 --chemical_scoring SubandprodChemicalScorer --virtual_visits 0 --progressive_bias_strategy 0 --diameter 8 --c_name Morphine --c_smiles "CN1CC[C@]23[C@@H]4[C@H]1CC5=C2C(=C(C=C5)O)O[C@H]3[C@H](C=C4)O" --folder_to_save Morphine_Test --biological_score_cut_off 0.1 --substrate_only_score_cut_off 0.01 --chemical_score_cut_off 0.3 --minimal_visit_counts 1 --organism_name 'none' --complementary_sink "building_block_morphine.csv" &